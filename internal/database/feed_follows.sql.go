// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH user_lookup AS (
  SELECT id, name 
  FROM users 
  WHERE users.name = $1
),
inserted_feed_follow AS (
  INSERT INTO feed_follows (user_id, feed_id, created_at, updated_at)
  SELECT user_lookup.id, $2, $3, $4
  FROM user_lookup
  RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
  inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
  feeds.name AS feed_name,
  user_lookup.name AS user_name
FROM inserted_feed_follow
INNER JOIN feeds ON feeds.id = inserted_feed_follow.feed_id
INNER JOIN user_lookup ON true
`

type CreateFeedFollowParams struct {
	Name      string
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.Name,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows
WHERE feed_follows.user_id = $1
AND feed_follows.feed_id = $2
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const getFeedFolllowsForUser = `-- name: GetFeedFolllowsForUser :many
WITH user_lookup AS (
  SELECT id
  FROM users 
  WHERE users.name = $1
)
SELECT 
  feeds.name as feed_name,
  feed_follows.feed_id as feed_id,
  feed_follows.user_id as user_id
FROM feed_follows
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
INNER JOIN user_lookup ON feed_follows.user_id = user_lookup.id
WHERE user_lookup.id = feed_follows.user_id
`

type GetFeedFolllowsForUserRow struct {
	FeedName string
	FeedID   uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) GetFeedFolllowsForUser(ctx context.Context, name string) ([]GetFeedFolllowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFolllowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFolllowsForUserRow
	for rows.Next() {
		var i GetFeedFolllowsForUserRow
		if err := rows.Scan(&i.FeedName, &i.FeedID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
